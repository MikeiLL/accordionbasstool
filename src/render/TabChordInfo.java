/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TabChordInfo.java
 *
 * Created on Jan 14, 2011, 12:33:07 AM
 */
package render;

import java.awt.Component;
import java.util.Vector;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import music.ParsedChordDef;

/**
 *
 * @author Ilya
 */
public class TabChordInfo extends ToolPanel
{

  boolean displayUnknown = false;
  boolean listChanging = false;

  String toolTip = "<html><b>Click</b> on the board to select button(s).<br/>" +
                   "<b>Hold Shift + Click</b> to select multiple buttons.<br/>" +
                   "(<b>Alt + Click</b> to just play a button when sound is enabled<br/>" +
                   "Possible chords will that match buttons pressed will be listed here.</html>";

  /** Creates new form TabChordInfo */
  public TabChordInfo()
  {
    initComponents();

    matchesListBox.setCellRenderer(new ChordListRender());

    matchesListBox.getSelectionModel().addListSelectionListener(new ListSelChangeListener()
    {

      @Override
      public void selectionChanged(int index)
      {
        selectMatchFromList();
      }
    });
  }

  @Override
  public void init(SeqColumnModel model)

  {
    super.init(model);
    clickTextPane.setText(columnModel.getSelectedComboStateString());
  }

  @Override
  protected void syncUIToDataModel(SyncType sync)
  {
    listChanging = true;

    Vector<ParsedChordDef> listItems;

    columnModel.matchingChordStore.setValid(false);

    if (displayUnknown) {
      listItems = columnModel.matchingChordStore.getAllMatchingSelChords(true);
    } else {
      listItems = columnModel.matchingChordStore.getKnownMatchingSelChords(true);
    }

    matchesListBox.setListData(listItems);

    matchesListBox.setSelectedValue(columnModel.getSelectedChordDef(), true);

    listChanging = false;

    clickTextPane.setText(columnModel.getSelectedComboStateString());
  }

  private void selectMatchFromList()
  {
    if (listChanging) {
      return;
    }

    ParsedChordDef chordDef = (ParsedChordDef) this.matchesListBox.getSelectedValue();
    if (chordDef != null) {
      columnModel.editSelectedColumn(chordDef, true);
    }
  }

  @Override
  protected boolean listenToCols()
  {
    return true;
  }

  @Override
  protected boolean listenToRows()
  {
    return true;
  }

  public void setDisplayUnknown(boolean display)
  {
    displayUnknown = display;
    syncUIToDataModel(null);
  }

  public void setDisplayInversion(boolean display)
  {
    columnModel.matchingChordStore.setRemoveInversion(display);
    syncUIToDataModel(null);
  }

  private class ChordListRender extends DefaultListCellRenderer
  {

    @Override
    public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)
    {
      ParsedChordDef chordDef = (ParsedChordDef) value;

      String info = "<html>";
      info += chordDef.nameHtml;
      info += "</html>";

      return super.getListCellRendererComponent(list, info, index, isSelected, cellHasFocus);
    }
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    checkIgnoreInversion = new javax.swing.JCheckBox();
    checkShowUnknownChords = new javax.swing.JCheckBox();
    jScrollPane1 = new javax.swing.JScrollPane();
    matchesListBox = new javax.swing.JList();
    clickTextPane = new render.TransparentTextPane();

    setToolTipText(toolTip);

    checkIgnoreInversion.setText("Don't Show Inversion Bass");
    checkIgnoreInversion.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        checkIgnoreInversionActionPerformed(evt);
      }
    });

    checkShowUnknownChords.setText("List Unknown Chords");
    checkShowUnknownChords.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        checkShowUnknownChordsActionPerformed(evt);
      }
    });

    jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Possible Matching Chords:"));
    jScrollPane1.setToolTipText("");

    matchesListBox.setFont(new java.awt.Font("Monospaced", 1, 17)); // NOI18N
    matchesListBox.setModel(new javax.swing.AbstractListModel() {
      String[] strings = { "A", "B", "C", "D" };
      public int getSize() { return strings.length; }
      public Object getElementAt(int i) { return strings[i]; }
    });
    matchesListBox.setToolTipText(toolTip);
    jScrollPane1.setViewportView(matchesListBox);

    clickTextPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Currently Selected On Board:"));
    clickTextPane.setText("Info");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(clickTextPane, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane1, 0, 0, Short.MAX_VALUE)
          .addComponent(checkShowUnknownChords)
          .addComponent(checkIgnoreInversion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(clickTextPane, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(checkShowUnknownChords)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(checkIgnoreInversion)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void checkShowUnknownChordsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_checkShowUnknownChordsActionPerformed
  {//GEN-HEADEREND:event_checkShowUnknownChordsActionPerformed
    this.setDisplayUnknown(this.checkShowUnknownChords.isSelected());
}//GEN-LAST:event_checkShowUnknownChordsActionPerformed

  private void checkIgnoreInversionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_checkIgnoreInversionActionPerformed
  {//GEN-HEADEREND:event_checkIgnoreInversionActionPerformed
    // Reselect the same chord in the list, may however be with an inversion
    this.setDisplayInversion(this.checkIgnoreInversion.isSelected());
}//GEN-LAST:event_checkIgnoreInversionActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JCheckBox checkIgnoreInversion;
  private javax.swing.JCheckBox checkShowUnknownChords;
  private render.TransparentTextPane clickTextPane;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JList matchesListBox;
  // End of variables declaration//GEN-END:variables
}
