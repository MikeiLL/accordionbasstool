/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ChordPicker.java
 *
 * Created on Sep 23, 2010, 5:34:18 PM
 */
package render;

import java.beans.PropertyChangeEvent;
import music.ChordDef;
import java.awt.event.ItemEvent;
import java.beans.PropertyChangeListener;
import music.Chord;
import music.Note;

/**
 *
 * @author Ilya
 */
public class ChordPicker extends javax.swing.JDialog implements
        PropertyChangeListener
{

  @Override
  public void propertyChange(PropertyChangeEvent evt)
  {
    if (evt.getPropertyName() != "updateCurrChord") {
      return;
    }

    ChordPickerController.ChordUpdateInfo updateInfo =
            (ChordPickerController.ChordUpdateInfo) evt.getNewValue();

    this.updateCurrChord(updateInfo.rootNote,
                         updateInfo.fullChord,
                         updateInfo.tableChordDef,
                         updateInfo.addedBass);
  }
  
  boolean changeConfirmed = false;
  ChordPickerController controller;
  ChordDef finalChord = new ChordDef();
  
  /** Creates new form ChordPicker */
  public ChordPicker(java.awt.Frame parent, boolean modal)
  {
    super(parent, modal);
    initComponents();

    this.getRootPane().setDefaultButton(okButton);

    controller = new ChordPickerController(chordTable, notePicker1, notePicker2, this.additionalBassCheckbox);
    controller.propDelegates.addPropertyChangeListener(this);
    controller.setupChord("C");
    controller.updateCurrChord();
  }

  public ChordDef getDefaultChordDef()
  {
    return finalChord;
  }

  private void updateCurrChord(Note rootNote,
          Chord newChord,
          ChordDef tableChordDef,
          Note addedBassNote)
  {
    finalChord.chord = newChord;

    // -- Set HTML Abbrev
    finalChord.abbrevHtml = rootNote.toString(true) + tableChordDef.abbrevHtml;

    boolean usingAddedBass = (addedBassNote != null);

    if (usingAddedBass) {
      finalChord.abbrevHtml += "/" + addedBassNote.toString(true);
    }

    // -- Set Plain Abbrev

    finalChord.abbrevPlain = rootNote.toString() + tableChordDef.abbrevPlain;

    if (usingAddedBass) {
      finalChord.abbrevPlain += "/" + addedBassNote.toString();
    }

    // -- Set Name
    finalChord.name = rootNote.toString(true) + " " + tableChordDef.name;

    if (usingAddedBass) {
      finalChord.name += " over " + addedBassNote.toString(true);
    }

    // -- Set Note List
    String notestr = finalChord.chord.toString("-", true);

    String info = "<html><b>" + finalChord.abbrevHtml + "</b>"
            + "<br/>" + finalChord.name + ": "
            + "(" + notestr + ")" + "</html>";

    currChordLabel.setText(info);
  }

  ChordDef showChordPicker(ChordDef startChordDef)
  {
    if (startChordDef != null) {
      finalChord = startChordDef;
      controller.setupChord(finalChord.abbrevPlain);
    } else {
      finalChord = new ChordDef();
      controller.setupChord("C");
    }

    //this.setupChord("A#minM9/D#");
    this.setModal(true);
    this.setVisible(true);

    //---> Modal Loop Here

    if (changeConfirmed) {
      return finalChord;
    }

    return null;
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    rootButtonGroup = new javax.swing.ButtonGroup();
    accButtonGroup = new javax.swing.ButtonGroup();
    notePicker1 = new render.NotePicker();
    notePicker2 = new render.NotePicker();
    additionalBassCheckbox = new javax.swing.JCheckBox();
    currChordLabel = new javax.swing.JLabel();
    okButton = new javax.swing.JButton();
    cancelButton = new javax.swing.JButton();
    showAdvancedCheck = new javax.swing.JCheckBox();
    jScrollPane1 = new javax.swing.JScrollPane();
    chordTable = new javax.swing.JTable();

    setTitle("Chord Picker");

    notePicker1.setBorder(javax.swing.BorderFactory.createTitledBorder("Root:"));

    notePicker2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

    additionalBassCheckbox.setText("Additional Bass");

    currChordLabel.setFont(new java.awt.Font("Tahoma", 0, 14));
    currChordLabel.setBorder(javax.swing.BorderFactory.createTitledBorder("Current Chord:"));

    okButton.setText("OK");
    okButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        okCancelButtonClicked(evt);
      }
    });

    cancelButton.setText("Cancel");
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        okCancelButtonClicked(evt);
      }
    });

    showAdvancedCheck.setSelected(true);
    showAdvancedCheck.setText("Show All Chords");
    showAdvancedCheck.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        toggleShowAllChords(evt);
      }
    });

    chordTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    chordTable.setCellSelectionEnabled(true);
    chordTable.setFillsViewportHeight(true);
    chordTable.setRowHeight(25);
    chordTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    chordTable.setShowHorizontalLines(false);
    chordTable.setShowVerticalLines(false);
    jScrollPane1.setViewportView(chordTable);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(10, 10, 10)
            .addComponent(additionalBassCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, 574, Short.MAX_VALUE))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
              .addComponent(notePicker2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
              .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                  .addComponent(notePicker1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
                  .addComponent(currChordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(showAdvancedCheck))
              .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                  .addComponent(cancelButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))))))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(okButton)
            .addGap(3, 3, 3)
            .addComponent(cancelButton))
          .addComponent(currChordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(showAdvancedCheck)
          .addComponent(notePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(additionalBassCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(notePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
        .addContainerGap())
    );

    java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
    setBounds((screenSize.width-610)/2, (screenSize.height-519)/2, 610, 519);
  }// </editor-fold>//GEN-END:initComponents

    private void toggleShowAllChords(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_toggleShowAllChords
      boolean simpleMode = (evt.getStateChange() == ItemEvent.DESELECTED);
      controller.changeChordSet(simpleMode);
    }//GEN-LAST:event_toggleShowAllChords

    private void okCancelButtonClicked(java.awt.event.ActionEvent evt)//GEN-FIRST:event_okCancelButtonClicked
    {//GEN-HEADEREND:event_okCancelButtonClicked
      changeConfirmed = (evt.getActionCommand() == "OK");
      this.setVisible(false);
    }//GEN-LAST:event_okCancelButtonClicked
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.ButtonGroup accButtonGroup;
  private javax.swing.JCheckBox additionalBassCheckbox;
  private javax.swing.JButton cancelButton;
  private javax.swing.JTable chordTable;
  private javax.swing.JLabel currChordLabel;
  private javax.swing.JScrollPane jScrollPane1;
  private render.NotePicker notePicker1;
  private render.NotePicker notePicker2;
  private javax.swing.JButton okButton;
  private javax.swing.ButtonGroup rootButtonGroup;
  private javax.swing.JCheckBox showAdvancedCheck;
  // End of variables declaration//GEN-END:variables
}
